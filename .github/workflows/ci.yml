name: CI (Docs, Specs, Schemas)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install deps (Node)
        run: pnpm install --frozen-lockfile

      - name: Install deps (Python)
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      # ---------- Docs build ----------
      - name: Build MkDocs (strict)
        run: ./scripts/mkdocs_build_ci.sh
        env:
          MKDOCS_GIT_COMMITTERS_APIKEY: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ---------- Linters ----------
      - name: Lint Markdown
        run: |
          # docs/ contains legacy files; ignore until formatted
          npx markdownlint "**/*.md" \
            --ignore "node_modules" \
            --ignore "site" \
            --ignore ".venv" \
            --ignore "docs" \
            --ignore "000-template.md" \
            || (echo "Run: npx markdownlint --fix to auto-fix some issues" && exit 1)

      - name: Lint YAML
        run: |
          FILES="$(git ls-files '*.yml' '*.yaml' | grep -v '^node_modules/' | grep -v '^site/' || true)"
          [ -z "$FILES" ] || yamllint -s -c .yamllint.yaml $FILES

      # ---------- OpenAPI validation ----------
      - name: Spectral lint (OpenAPI 3.1)
        run: pnpm run lint:oas

      # ---------- JSON Schema validation ----------
      - name: Validate against schemas (ajv)
        run: pnpm run schema:validate

      - name: Run tests
        run: pytest -q

  changes:
    runs-on: ubuntu-latest
    outputs:
      connectors: ${{ steps.matrix.outputs.connectors }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: paths
        uses: dorny/paths-filter@v3
        with:
          filters: |
            off:
              - 'src/adapters/off.py'
              - 'examples/off/**'
              - 'tests/connectors/off/**'
              - 'tools/ingest_and_map.py'
              - 'overlays/off.*'
      - id: matrix
        run: |
          connectors=()
          if [[ "${{ steps.paths.outputs.off }}" == 'true' ]]; then connectors+=("off"); fi
          printf 'connectors=[%s]\n' "$(IFS=,; echo "${connectors[*]}")" >> "$GITHUB_OUTPUT"

  connectors:
    needs: changes
    if: needs.changes.outputs.connectors != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        connector: ${{ fromJSON(needs.changes.outputs.connectors) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install deps (Python)
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
      - name: Run connector smoke tests
        run: pytest -q tests/connectors/${{ matrix.connector }}

